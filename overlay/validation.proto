syntax = "proto3";


// Master service definition
service Master {

  // Allows streamed uploading of a .zip model to the Master
  rpc UploadFile(ModelFile) returns (UploadStatus) {}

  // Submits a validation job to the cluster
  rpc SubmitValidationJob(ValidationJobRequest) returns (ValidationJobResponse) {}

  // Registers a Worker to track
  rpc RegisterWorker (WorkerRegistrationRequest) returns (WorkerRegistrationResponse) {}

  // De-registers a Worker from tracking
  rpc DeregisterWorker (WorkerRegistrationRequest) returns (WorkerRegistrationResponse) {}
}

// Worker registration request that gets sent to the master, to be tracked
message WorkerRegistrationRequest {
  string hostname = 1;
  int32  port = 2;
}

// Worker registration response message the master sends back to the worker
message WorkerRegistrationResponse {
  bool success = 1;
}

// Worker service definition
service Worker {

  // Registers a Worker to track via heartbeats
  rpc BeginValidationJob(ValidationJobRequest) returns (ValidationJobResponse) {}
}

// Worker job request for a set of GISJOINs, and a model to validate
message ValidationJobRequest {
  string id = 1;
  JobMode master_job_mode = 2;
  JobMode worker_job_mode = 3;
  ModelFramework model_framework = 4;
  ModelCategory model_category = 5;
  string mongo_host = 6;
  int32 mongo_port = 7;
  MongoReadConfig read_config = 8;
  string database = 9;
  string collection = 10;
  repeated string feature_fields = 11;
  string label_field = 12;
  bool normalize_inputs = 13;
  ValidationBudget validation_budget = 14;
  string validation_metric = 15;
  repeated string gis_joins = 16;
  ModelFile model_file = 17;
}

message ValidationJobResponse {
  string id = 1;
  bool ok = 2;
  string error_msg = 3;
  repeated ValidationMetric metrics = 4;
}

message ValidationMetric {
  string gis_join = 1;
  double loss = 2;
  double accuracy = 3;
}

message ModelFile {
  string type = 1;
  string md5_hash = 2;
  bytes data = 3;
}

message UploadStatus {
  string message = 1;
  string file_hash = 2;
  UploadStatusCode upload_status_code = 3;
}

message MongoReadConfig {
  string read_preference = 1;
  string read_concern = 2;
}

message ValidationBudget {
  BudgetType budget_type = 1;
  StaticBudget static_budget = 2;
  IncrementalVarianceBudget variance_budget = 3;
}

message IncrementalVarianceBudget {
  int64 initial_allocation = 1; // What every GISJOIN starts with, before more gets allocated
}

message StaticBudget {
  int64 total_limit = 1; // Gets translated into a equal-proportion limit on each GISJOIN
  int64 strata_limit = 2; // Specifies a limit each GISJOIN
  float sample_rate = 3; // Specifies a fixed sampling rate for each GISJOIN
}

// --- enum definitions ---

enum UploadStatusCode {
  UPLOAD_STATUS_CODE_UNKNOWN = 0;
  UPLOAD_STATUS_CODE_OK = 1;
  UPLOAD_STATUS_CODE_FAILED = 2;
}

enum BudgetType {
  STATIC_BUDGET = 0;
  INCREMENTAL_VARIANCE_BUDGET = 1;
}

enum JobMode {
  SYNCHRONOUS = 0;
  ASYNCHRONOUS = 1;
  MULTITHREADED = 2;
}

enum ModelFramework {
  TENSORFLOW = 0;
  SCIKIT_LEARN = 1;
  PYTORCH = 2;
}

enum ModelCategory {
  REGRESSION = 0;
}